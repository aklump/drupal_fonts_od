<?php
/**
 * @file
 * Base module file for fonts_od
 *
 * @defgroup fonts_od Fonts On Demand
 * @{
 */

/**
 * @var FONTS_OD_SANS_SERIF
 */
define('FONTS_OD_SANS_SERIF', 'sans-serif');
/**
 * @var FONTS_OD_SERIF
 */
define('FONTS_OD_SERIF', 'serif');
/**
 * @var FONTS_OD_MONOSPACE
 */
define('FONTS_OD_MONOSPACE', 'monospace');

/**
 * Implements hook_permission().
 */
function fonts_od_permission() {
  return array(
    //'fonts_od:administer' => array(
    //  'title' => t('Administer Fonts On-Demand'),
    //  'description' => t('Perform administration tasks for Fonts On-Demand.'),
    //),
    'fonts_od:view' => array(
      'title' => t('View On-Demand Fonts'),
      'description' => t('View information about On-Demand Fonts.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function fonts_od_menu() {
  $items['admin/appearance/fonts-od'] = array(
    'title' => 'On-Demand Fonts',
    'description' => 'View information about registered on-demand fonts',
    'page callback' => 'fonts_od_fonts_page',
    'access arguments' => array('fonts_od:view'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fonts_od.pages.inc',
  );
  $items['admin/appearance/fonts-od/%'] = array(
    'title callback' => '_fonts_od_menu_details_title',
    'title arguments' => array(3),
    'title' => 'Details',
    'description' => 'Administer font information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fonts_od_edit_form', 3),
    'access arguments' => array('fonts_od:view'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fonts_od.admin.inc',
  );
  return $items;
}

/**
 * Return the page title based on a font key
 */
function _fonts_od_menu_details_title($name) {
  if ($font = fonts_od_get_font($name)) {
    return t('Font Details: @name', array(
      '@name' => $font['title'],
    ));
  }
  return t('Font Details');
}

/**
 * Return default values for a single font definition array
 *
 * @return array
 *
 * @see hook_fonts_od_defaults_alter()
 */
function fonts_od_defaults() {
  $defaults = array(
    'file path' => drupal_get_path('theme', variable_get('theme_default', '')) . '/fonts',
    'formats' => array(
      'woff' => '.woff',
      'truetype' => '.ttf',
      'svg' => '.svg',
      'embedded-opentype' => '.eot',
    ),
    'fallback' => array(
      'serif'         => array('Times New Roman', 'Georgia', 'serif'),
      'sans-serif'    => array('Arial', 'Verdana', 'san-serif'),
      'monospace'     => array('Courier New', 'Lucida Console', 'Courier', 'monospace'),
      'slab-serif'    => array('Courier New', 'Courier', 'serif'),
      'blackletter'   => array('Times New Roman', 'Georgia', 'serif'),
      'script'        => array('Comic Sans MS', 'cursive', 'sans-serif'),
      'hand'          => array('Comic Sans MS', 'cursive', 'sans-serif'),
      'decorative'    => array('Impact', 'Charcoal', 'sans-serif'),
    ),
  );
  drupal_alter('fonts_od_defaults', $defaults);

  return $defaults;
}

/**
 * Implements hook_fonts_od_info_alter().
 *
 * @param array &$fonts
 *
 * @return NULL
 */
function fonts_od_fonts_od_info_alter(&$info) {

  // Auto load fonts from our default theme/fonts folder

  // Create an index of fonts already registered
  $index = array();
  foreach ($info as $key => $data) {
    $index[$data['basename']] = $key;
  }

  // No auto load
  $defaults = fonts_od_defaults();
  $ext = implode('|', $defaults['formats']);
  $files = file_scan_directory('./' . $defaults['file path'], '/(' . $ext . ')$/');
  foreach ($files as $data) {
    if (array_key_exists($data->name, $index)) {
      continue;
    }

    // Smart auto naming
    $name_base = $data->name;
    $name_base = strtolower($name_base);
    $name_base = preg_replace('/[^a-z0-9]/', ' ', $name_base);
    $name_base = str_replace('webfont', ' ', $name_base);
    $name_base = str_replace('regular', '', $name_base);
    $name_base = str_replace('mediumitalic', 'medium italic', $name_base);
    $name_base = str_replace('bolditalic', 'bold italic', $name_base);
    $name_base = str_replace('lightitalic', 'light italic', $name_base);
    $name_base = str_replace('extrabold', 'extra bold', $name_base);
    $name_base = str_replace('lightbold', 'light bold', $name_base);
    $name_base = str_replace('webfont', ' ', $name_base);
    $name_base = trim($name_base);
    drupal_alter('fonts_od_name', $name_base);
    $name_base = trim($name_base);

    // smart weight
    if (strpos($name_base, 'bold')) {
      $weight = 'bold';
    }
    elseif (strpos($name_base, 'light')) {
      $weight = 'lighter';
    }
    else {
      $weight = 'normal';
    }

    // smart style
    $style = strpos($name_base, 'italic') === FALSE ? 'normal' : 'italic';

    $name = str_replace(' ', '_', $name_base);
    $title = ucwords($name_base);

    $info[$data->name] = array(
      'name' => $name,
      'title' => $title,
      //@todo a smarter way to guess family?
      'family' => FONTS_OD_SANS_SERIF,
      'basename' => $data->name,
      'file path' => drupal_dirname($data->uri),
      'font-weight' => $weight,
      'font-style' => $style,
    );
    $index[$data->name] = key($info);
  }
}

/**
 * Return a font by machine name
 *
 * @param string $name
 *
 * @return array or FALSE
 */
function fonts_od_get_font($name) {
  $info = fonts_od_fonts();
  return array_key_exists($name, $info) ? $info[$name] : FALSE;
}

/**
 * Load a font override from the database
 *
 * @param string $name
 *   The machine name of the font
 *
 * @return array
 */
function fonts_od_load($name) {
  try {
    $record = db_select('fonts_od', 'f')
      ->fields('f', array('name', 'title', 'family', 'fallback'))
      //->fields('f', array('name', 'title', 'family', 'fallback', 'css_name'))
      ->condition('name', $name)
      ->execute()->fetchAssoc();
    if (!empty($record['name'])) {
      if ($record['fallback']) {
        $record['fallback'] = array_filter(explode(',', $record['fallback']));
      }
      //// Couldn't use field alias in db_select because of the hyphen
      //if (!empty($record['css_name'])) {
      //  $record['font-family'] = $record['css_name'];
      //}
      //unset($record['css_name']);
    }
  }
  catch (Exception $e) {
    watchdog_exception('fonts_od', $e, "Couldn't load font: %name", array(
      '%name' => $name,
    ));
  };

  return !empty($record) ? $record : array();
}

/**
 * Store user-overrides for a font
 */
function fonts_od_save($info) {
  if (!isset($info['name'])) {
    return FALSE;
  }
  $info['fallback'] = fonts_od_implode($info['fallback']);
  if (fonts_od_load($info['name'])) {
    drupal_write_record('fonts_od', $info, 'name');
  }
  else {
    drupal_write_record('fonts_od', $info);
  }
  cache_clear_all('fonts_od:fonts', 'cache');
}

/**
 * Return all fonts available to be used on-demand
 *
 * @return array
 *   Keyed by font machine name
 */
function fonts_od_fonts() {
  if (($caching = variable_get('cache', FALSE))) {
    if ($cache = cache_get('fonts_od:fonts', 'cache')) {
      $fonts = empty($cache->data) ? NULL : $cache->data;
    }
    else {
      // Set the default values
      $fonts = array();
      $cache = (object) array('data' => array());
    }
  }
  if (empty($fonts)) {

    // Calculate the value of $fonts now...
    $defaults = fonts_od_defaults();

    $info     = module_invoke_all('fonts_od_info');
    drupal_alter('fonts_od_info', $info);

    // Apply database overrides
    foreach ($info as $key => $i) {
      if ($overrides = fonts_od_load($i['name'])) {
        $overrides = array_filter($overrides);
        $info[$key] = $overrides + $info[$key];
      }
    }

    $fonts = array();
    foreach ($info as $i) {
      $i += array_intersect_key($defaults, array_flip(array('file path')));
      $ext = implode('|', $defaults['formats']);
      $files = file_scan_directory('./' . $i['file path'], '/(' . $ext . ')$/');
      $i['extensions'] = array();
      foreach ($files as $key => $data) {
        if ($data->name !== $i['basename']) {
          unset($files[$key]);
        }
        else {
          $extension = str_replace($data->name, '', $data->filename);
          $i['extensions'][] = $extension;
          $type = array_search($extension, $defaults['formats']);
          $i['files'][$type] = trim($key, '/.');

          //font-family
          $i['fallback'] = $defaults['fallback'][$i['family']];
          $i['font-family'] = $i['title'];
        }
      }

      // Get the svg id if svg font
      if (!empty($i['files']['svg'])
          && ($svg = file_get_contents($i['files']['svg']))
          && preg_match('/font +id\=(?:\'|")([^"\']+)(?:\'|")/i', $svg, $found)) {
        $i['svg_id'] = $found[1];
      }

      // Add in the default font-family based on generic family
      if (empty($i['fallback']) && !empty($i['family'])) {
        $i['fallback'] = fonts_od_get_fallback($i['family']);
      }

      //@todo the $i['name'] is undefined under certain conditions; fix
      $fonts[$i['name']] = $i + array(
        'module' => 'fonts_od',
        'download url' => NULL,
        'font-family' => NULL,
        'fallback' => array(),
        'name' => NULL,
        'title' => NULL,
        'family' => NULL,
        'basename' => NULL,
        'file path' => NULL,
        'font-style' => 'normal',
        'font-weight' => 'normal',
        'svg_id' => NULL,
      );

      // Add in the fallback
      $fonts[$i['name']]['font-family']  = array_merge(explode(',', $fonts[$i['name']]['font-family']), $fonts[$i['name']]['fallback']);
      $fonts[$i['name']]['font-family']  = fonts_od_implode($fonts[$i['name']]['font-family']);
    }

    drupal_alter('fonts_od_fonts', $fonts);

    if ($caching) {
      cache_set('fonts_od:fonts', $fonts, 'cache', CACHE_PERMANENT);
    }
  }
  return $fonts;
}

/**
 * Return the fallback based on generic family
 *
 * @return array
 *
 * @see fonts_od_implode()
 */
function fonts_od_get_fallback($family) {
  $fallback = fonts_od_defaults();
  return isset($fallback['fallback'][$family]) ? $fallback['fallback'][$family] : array();
}

/**
 * Add a font by name, title or font-family string
 *
 * @param string $font
 *   The human title of a font or the font-family declaration; all of these are
     valid:

     fontin_sans_small_caps
     Fontin Sans Small Caps
     "Fontin Sans Small Caps", Arial, Georgia, sans-serif
 *
 * @return $string or FALSE
 *   The string is the style directive including fallback fonts, style and weight.
 *
 * @see fonts_od_include_font_by_machine_name()
 */
function fonts_od_include_font($font) {
  $info = fonts_od_fonts();
  foreach ($info as $i) {
    if ($i['title'] == $font
        || $i['name'] == $font
        || $i['font-family'] == $font) {

      module_invoke_all('fonts_od_include_font', $i);

      if ($i['module'] == 'fonts_od') {
        $family = explode(',', $i['font-family']);
        $family = $family[0];

        $eot  = url($i['files']['embedded-opentype']);
        $woff = url($i['files']['woff']);
        $ttf  = url($i['files']['truetype']);
        $svg  = url($i['files']['svg']);
        $id   = $i['svg_id'];

        // Generate the @font-face markup based on www.fontsquirrel.com generator
        $output = <<<EOD
@font-face {
font-family: {$family};
src: url('{$eot}');
src: url('{$eot}?#iefix') format('embedded-opentype'),
 url('{$woff}') format('woff'),
 url('{$ttf}') format('truetype'),
 url('{$svg}#{$id}') format('svg');
font-weight: {$i['font-weight']};
font-style: {$i['font-style']};
}
EOD;
        drupal_add_css($output, 'inline');
      }

      $style = array(
        'font-family' => $i['font-family'],
        'font-style'  => $i['font-style'],
        'font-weight' => $i['font-weight'],
      );

      $return = '';
      foreach ($style as $key => $value) {
        $return .= "$key: $value; ";
      }
      return trim($return);
    }
  }
  watchdog('fonts_od', 'Font %font not found', array(
    '%font' => $font,
  ));
  return FALSE;
}

/**
 * Implode a font-family array into style string, adding quotes and commas
 *
 * @param array
 *
 * @param string
 */
function fonts_od_implode($families) {
  foreach (array_keys($families) as $key) {
    $families[$key] = trim($families[$key], "' \"");
    if (strpos($families[$key], ' ') !== FALSE) {
      $families[$key] = '"' . $families[$key] . '"';
    }
  }
  $families = array_unique($families);

  return implode(', ', $families);
}

/**
 * Implements hook_flush_caches().
 */
function fonts_od_flush_caches() {
  fonts_od_fonts();
}

/**
 * Return the sass markup of a font
 *
 * @param array $font
 *   The font array; requires $font['files'] have values.
 *
 * @return string
 */
function fonts_od_get_sass($font) {
  if (empty($font['files'])) {
    return '';
  }
  //http://compass-style.org/reference/compass/css3/font_face/
  $theme = variable_get('theme_default', path_to_theme());
  foreach ($font['files'] as $key => $value) {
    $font['files'][$key] = trim(str_replace(drupal_get_path('theme', $theme) . '/fonts', '', $value), '/');
  }

  return <<<EOD
@include font-face("{$font['title']}", font-files("{$font['files']['woff']}", "{$font['files']['truetype']}", "{$font['files']['svg']}", "{$font['files']['embedded-opentype']}"), '{$font['svg_id']}', '{$font['font-weight']}', '{$font['font-style']}');
EOD;
}

/**
 * Include (or return include path to) a fonts_od include file(s)
 *
 * @code
 *   'file' => fonts_od_include('pages', 2),
 * @endcode
 *
 * @param... string
 *   Any number of include file keys to include
 *   For includes/fonts_od.example.inc, set this to: example
 * @param int $action
 *   The final argument, if numeric is one of.  If omitted 1 is the default.
 *   1: include the module(s)
 *   2: return the path relative to the module, e.g., hook_menu
 *   3: return the complete Drupal path per drupal_get_path()
 *
 * @return string
 *   The path to the FIRST include file requested, but only if $return is set to TRUE
 */
function fonts_od_include() {
  $includes = func_get_args();
  if (is_numeric(end($includes))) {
    $action = array_pop($includes);
  }
  else {
    $action = 1;
  }
  if ($action > 1) {
    $module = implode('.', array('includes/fonts_od', reset($includes), 'inc'));
    switch ($action) {
      case 3:
        $module = drupal_get_path('module', 'fonts_od') . $module;
        break;
    }
    return $module;
  }
  reset($includes);
  foreach ($includes as $include_name) {
    module_load_include('inc', 'fonts_od', 'includes/fonts_od.' . $include_name);
  }
}

/**
 * Used by usort to sort an array with the longest strings first
 */
function _fonts_od_sort_by_strlen($a, $b) {
  if (strlen($a) > strlen($b)) {
    return -1;
  }
  elseif (strlen($a) === strlen($b)) {
    return 0;
  }
  else {
    return 1;
  }
}
